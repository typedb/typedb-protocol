// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

import "proto/answer.proto";
import "proto/concept.proto";

package typedb.protocol;

message QueryStructure {
  repeated QueryBranch branches = 1;

  message QueryBranch {
    repeated QueryConstraint edges = 1;
  }

  message QueryConstraint {
    oneof edge {
      // Thing
      Isa isa = 1;
      Has has = 2;
      Links links = 3;

      // Type
      Kind kind = 4;
      Sub sub = 5;
      Owns owns = 6;
      Relates relates = 7;
      Plays plays = 8;

      // Function
      Comparison comparison = 9;
      Expression expression = 10;
      FunctionCall function_call = 11;

      // Special
      Is is = 12;
      IID iid = 13;
    }
  }

  // Vertices
  message QueryVariable {
    string name = 1;
  }

  message QueryType {
    oneof type {
      QueryVariable variable = 1;
      string label = 2;
    }
  }

  message QueryValue {
    QueryVariable variable = 1;
    Value constant = 2;
  }

  // Edges
  message Isa {
    QueryVariable thing = 1;
    QueryType type = 2;
  };

  message Has {
    QueryVariable owner = 1;
    QueryVariable attribute = 2;
  };

  message Links {
    QueryVariable relation = 1;
    repeated RolePlayer roleplayers = 2;
    message RolePlayer {
      QueryVariable player = 1;
      QueryType role = 2;
    }
  };

  // Type
  message Kind {
    protocol.ConceptDocument.Node.Leaf.Kind kind = 1;
    QueryType type = 2;
  }

  message Sub {
    QueryType subtype = 1;
    QueryType supertype = 2;
  };

  message Owns {
    QueryType subtype = 1;
    QueryType supertype = 2;
  };

  message Relates {
    QueryType relation = 1;
    QueryType role = 2;
  };

  message Plays {
    QueryType player = 1;
    QueryType role = 2;
  };

  // Function
  message Comparison {
    QueryValue lhs = 1;
    QueryValue rhs = 2;
  };

  message Expression {
    string text = 1;
    QueryVariable assigned = 2;
    repeated QueryVariable arguments = 3; // Treats constants as part of the text.
  };

  message FunctionCall {
    string name = 1;
    repeated QueryVariable assigned = 2;
    repeated QueryValue arguments = 3; // Include constants, since variables are schema-objects
  };

  // Special
  message Is {
    QueryVariable lhs = 1;
    QueryVariable rhs = 2;
  };

  message IID {
    QueryVariable var = 1;
    bytes IID = 2;
  };
}
