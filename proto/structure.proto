// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

import "proto/answer.proto";
import "proto/concept.proto";

package typedb.protocol;

message QueryStructure {
  repeated QueryBranch branches = 1;

  message QueryBranch {
    repeated QueryConstraint edges = 1;
  }

  // Vertices
  message QueryVariable {
    string name = 1;
  }

  message QueryType {
    oneof type {
      QueryVariable variable = 1;
      Concept label = 2;
    }
  }

  message QueryValue {
    oneof value {
      QueryVariable variable = 1;
      Value constant = 2;
    }
  }

  message QueryConstraint {
    optional ConstraintSpan span = 1;
    oneof edge {
      // Thing
      Isa isa = 2;
      Has has = 3;
      Links links = 4;

      // Type
      Kind kind = 5;
      Sub sub = 6;
      Owns owns = 7;
      Relates relates = 8;
      Plays plays = 9;

      // Function
      Comparison comparison = 10;
      Expression expression = 11;
      FunctionCall function_call = 12;

      // Special
      Is is = 13;
      IID iid = 14;
    }

    message ConstraintSpan {
      uint64 begin = 1;
      uint64 end = 2;
    }

    message ConstraintExactness {
      oneof exactness {
        Exact exact = 1;
        Subtypes subtypes = 2;
      }
      message Exact {}
      message Subtypes {}
    }

    // Edges
    message Isa {
      QueryVariable thing = 1;
      QueryType type = 2;
      ConstraintExactness exactness = 3;
    };

    message Has {
      QueryVariable owner = 1;
      QueryVariable attribute = 2;
      ConstraintExactness exactness = 3;
    };

    message Links {
      QueryVariable relation = 1;
      repeated RolePlayer roleplayers = 2;
      ConstraintExactness exactness = 3;
      message RolePlayer {
        QueryVariable player = 1;
        QueryType role = 2;
      }
    };

    // Type
    message Kind {
      protocol.ConceptDocument.Node.Leaf.Kind kind = 1;
      QueryType type = 2;
    }

    message Sub {
      QueryType subtype = 1;
      QueryType supertype = 2;
      ConstraintExactness exactness = 3;
    };

    message Owns {
      QueryType subtype = 1;
      QueryType supertype = 2;
      ConstraintExactness exactness = 3;
    };

    message Relates {
      QueryType relation = 1;
      QueryType role = 2;
      ConstraintExactness exactness = 3;
    };

    message Plays {
      QueryType player = 1;
      QueryType role = 2;
      ConstraintExactness exactness = 3;
    };

    // Function
    message Comparison {
      QueryValue lhs = 1;
      QueryValue rhs = 2;
    };

    message Expression {
      string text = 1;
      QueryVariable assigned = 2;
      repeated QueryVariable arguments = 3; // Treats constants as part of the text.
    };

    message FunctionCall {
      string name = 1;
      repeated QueryVariable assigned = 2;
      repeated QueryValue arguments = 3; // Include constants, since variables are schema-objects
    };

    // Special
    message Is {
      QueryVariable lhs = 1;
      QueryVariable rhs = 2;
    };

    message IID {
      QueryVariable var = 1;
      bytes IID = 2;
    };
  }
}
