// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

import "proto/concept.proto";

package typedb.protocol;

message ConceptRow {
    repeated RowEntry row = 1;
//    Explainables explainables = 2;
}

message RowEntry {
    oneof entry {
        Empty empty = 1;
        Concept concept = 2;
        Value value = 3;
        ConceptList concept_list = 4;
        ValueList value_list = 5;
    }

    message Empty {}

    message ConceptList {
        repeated Concept concepts = 1;
    }

    message ValueList {
        repeated Value values = 1;
    }
}

//
//message Explainables {
//    map<string, Explainable> relations = 1;
//    map<string, Explainable> attributes = 2;
//    map<string, Owned> ownerships = 3;
//
//    message Owned {
//        map<string, Explainable> owned = 1;
//    }
//}
//
//message Explainable {
//    string conjunction = 1;
//    int64 id = 2;
//}
//
//message ConceptMapGroup {
//    Concept owner = 1;
//    repeated ConceptMap concept_maps = 2;
//}
//
//message ValueGroup {
//    Concept owner = 1;
//    optional Value value = 2;
//}

message ReadableConceptTree {

    Node.Map root = 1;

    message Node {
        oneof node {
            Map map = 1;
            List list = 2;
            ReadableConcept readable_concept = 3;
        }

        message Map {
            map<string, Node> map = 1;
        }

        message List {
            repeated Node list = 1;
        }

        message ReadableConcept {
            oneof readable_concept {
                EntityType entity_type = 1;
                RelationType relation_type = 2;
                AttributeType attribute_type = 3;

                RoleType role_type = 4;

                Attribute attribute = 5;

                Value value = 6;
            }
        }
    }
}
