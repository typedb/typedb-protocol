// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package typedb.protocol;

message DatabaseManager {

    message Get {
        message Req {
            string name = 1;
        }

        message Res {
            DatabaseReplicas database = 1;
        }
    }

    message All {
        message Req {}
        message Res {
            repeated DatabaseReplicas databases = 1;
        }
    }

    message Contains {
        message Req {
            string name = 1;
        }

        message Res {
            bool contains = 1;
        }
    }

    message Create {
        message Req {
            string name = 1;
        }

        message Res {
            DatabaseReplicas database = 1;
        }
    }

    message Import {
        message Req {
            oneof req {
                Start start = 1;
                Item item = 2;
            }
        }

        message Start {

        }

        message Item {

        }
    }

}

message DatabaseReplicas {

    string name = 1;
    repeated Replica replicas = 2;

    message Replica {
        string address = 1;
        bool primary = 2;
        bool preferred = 3;
        int64 term = 4;
    }
}

message Database {

    message Schema {
        message Req {
            string name = 1;
        }

        message Res {
            string schema = 1;
        }
    }

    message TypeSchema {
        message Req {
            string name = 1;
        }

        message Res {
            string schema = 1;
        }
    }

    message Export {
        message Req {
            string name = 1;
        }


// TODO: Copypaste from queries
//        message InitialRes {
//            oneof res {
//                Error error = 1;
//                Ok ok = 2;
//            }
//
//            message Ok {
//                oneof ok {
//                    Done done = 1;
//                    ConceptDocumentStream concept_document_stream = 3;
//                    ConceptRowStream concept_row_stream = 4;
//                }
//
//                message Done {
//                    Type query_type = 1;
//                }
//
//                message ConceptDocumentStream {
//                    // note: we could use this first response to record debug info, type annotations, warnings, etc
//                    // TODO: network optimisation: replace keys with IDs, sending keys in the header to rebuild the document on the client side
//                    // TODO: network optimisation: replace types (== mostly constant strings) with a IDs, sending types in the header to rebuild on the client side
//                    Type query_type = 2;
//                }
//
//                message ConceptRowStream {
//                    // TODO: network optimisation: replace types (== mostly constant strings) with a IDs, sending types in the header to rebuild on the client side
//                    repeated string column_variable_names = 1;
//                    Type query_type = 2;
//                }
//            }
//        }
//
//        message ResPart {
//            oneof res {
//                ConceptDocumentsRes documents_res = 1;
//                ConceptRowsRes rows_res = 2;
//            }
//
//            message ConceptDocumentsRes {
//                repeated ConceptDocument documents = 1;
//            }
//
//            message ConceptRowsRes {
//                repeated ConceptRow rows = 1;
//            }
//        }
//
//        message ResPart {
//            oneof payload {
//                Schema.Res schema = 1; //
//                DataChunk data = 2;
//            }
//        }
    }

    message Delete {
        message Req {
            string name = 1;
        }
        message Res {}
    }
}
