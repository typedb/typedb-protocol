//
// Copyright (C) 2021 Grakn Labs
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option java_package = "grakn.protocol";
option java_outer_classname = "CoreServiceProto";

import "core/core_database.proto";
import "common/session.proto";
import "common/transaction.proto";

package grakn.protocol;

service GraknCore {

    // Database Manager API
    rpc databases_contains (CoreDatabaseManager.Contains.Req) returns (CoreDatabaseManager.Contains.Res);
    rpc databases_create (CoreDatabaseManager.Create.Req) returns (CoreDatabaseManager.Create.Res);
    rpc databases_all (CoreDatabaseManager.All.Req) returns (CoreDatabaseManager.All.Res);

    // Database API
    rpc database_schema (CoreDatabase.Schema.Req) returns (CoreDatabase.Schema.Res);
    rpc database_delete (CoreDatabase.Delete.Req) returns (CoreDatabase.Delete.Res);

    // Session API
    rpc session_open (Session.Open.Req) returns (Session.Open.Res);
    rpc session_close (Session.Close.Req) returns (Session.Close.Res);
    // Checks with the server that the session is still alive, and informs it that it should be kept alive.
    rpc session_pulse (Session.Pulse.Req) returns (Session.Pulse.Res);

    // Transaction Streaming API
    // Opens a bi-directional stream representing a stateful transaction, streaming
    // requests and responses back-and-forth. The first transaction client message must
    // be {Transaction.Open.Req}. Closing the stream closes the transaction.
    rpc transaction (stream Transaction.Client) returns (stream Transaction.Server);

}
