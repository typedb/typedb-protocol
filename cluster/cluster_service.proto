//
// Copyright (C) 2022 Vaticle
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option java_package = "com.vaticle.typedb.protocol";
option java_outer_classname = "ClusterServiceProto";
option java_generic_services = true;


import "cluster/cluster_server.proto";
import "cluster/cluster_user.proto";
import "cluster/cluster_database.proto";
import "common/session.proto";
import "common/transaction.proto";

package typedb.protocol;

service TypeDBCluster {

    // Server Manager API
    rpc servers_all (ServerManager.All.Req) returns (ServerManager.All.Res);

    // User Manager API
    rpc users_contains (ClusterUserManager.Contains.Req) returns (ClusterUserManager.Contains.Res);
    rpc users_create (ClusterUserManager.Create.Req) returns (ClusterUserManager.Create.Res);
    rpc users_delete (ClusterUserManager.Delete.Req) returns (ClusterUserManager.Delete.Res);
    rpc users_all (ClusterUserManager.All.Req) returns (ClusterUserManager.All.Res);
    rpc users_password_set (ClusterUserManager.PasswordSet.Req) returns (ClusterUserManager.PasswordSet.Res);
    rpc users_get (ClusterUserManager.Get.Req) returns (ClusterUserManager.Get.Res);

    // User API
    rpc user_password_update (ClusterUser.PasswordUpdate.Req) returns (ClusterUser.PasswordUpdate.Res);
    rpc user_token (ClusterUser.Token.Req) returns (ClusterUser.Token.Res);

    // Database Manager API
    rpc databases_get (ClusterDatabaseManager.Get.Req) returns (ClusterDatabaseManager.Get.Res);
    rpc databases_all (ClusterDatabaseManager.All.Req) returns (ClusterDatabaseManager.All.Res);
    rpc databases_contains (ClusterDatabaseManager.Contains.Req) returns (ClusterDatabaseManager.Contains.Res);
    rpc databases_create (ClusterDatabaseManager.Create.Req) returns (ClusterDatabaseManager.Create.Res);

    // Database API
    rpc database_schema (CoreDatabase.Schema.Req) returns (CoreDatabase.Schema.Res);
    rpc database_type_schema (CoreDatabase.TypeSchema.Req) returns (CoreDatabase.TypeSchema.Res);
    rpc database_rule_schema (CoreDatabase.RuleSchema.Req) returns (CoreDatabase.RuleSchema.Res);
    rpc database_delete (CoreDatabase.Delete.Req) returns (CoreDatabase.Delete.Res);

    // Session API
    rpc session_open (Session.Open.Req) returns (Session.Open.Res);
    rpc session_close (Session.Close.Req) returns (Session.Close.Res);
    // Checks with the server that the session is still alive, and informs it that it should be kept alive.
    rpc session_pulse (Session.Pulse.Req) returns (Session.Pulse.Res);

    // Transaction Streaming API
    // Opens a bi-directional stream representing a stateful transaction, streaming
    // requests and responses back-and-forth. The first transaction client message must
    // be {Transaction.Open.Req}. Closing the stream closes the transaction.
    rpc transaction (stream Transaction.Client) returns (stream Transaction.Server);
}
