//
// Copyright (C) 2020 Grakn Labs
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option java_package = "grakn.protocol";
option java_outer_classname = "TypeProto";

import "protobuf/concept.proto";
import "protobuf/thing.proto";

package grakn.protocol;

message TypeMethod {
    message Req {
        oneof req {
            // Type method requests
            Type.Delete.Req type_delete_req = 200;
            Type.SetLabel.Req type_setLabel_req = 201;
            Type.GetSupertype.Req type_getSupertype_req = 202;
            Type.SetSupertype.Req type_setSupertype_req = 203;
            Type.IsRoot.Req type_isRoot_req = 204;

            // Rule method requests
            Rule.When.Req rule_when_req = 300;
            Rule.Then.Req rule_then_req = 301;

            // RoleType method requests
            RoleType.GetRelation.Req roleType_getRelation_req = 400;

            // ThingType method requests
            ThingType.IsAbstract.Req thingType_isAbstract_req = 500;
            ThingType.SetAbstract.Req thingType_setAbstract_req = 501;
            ThingType.UnsetAbstract.Req thingType_unsetAbstract_req = 502;
            ThingType.SetOwns.Req thingType_setOwns_req = 506;
            ThingType.SetPlays.Req thingType_setPlays_req = 508;
            ThingType.UnsetOwns.Req thingType_unsetOwns_req = 509;
            ThingType.UnsetPlays.Req thingType_unsetPlays_req = 511;

            // EntityType method requests
            EntityType.Create.Req entityType_create_req = 600;

            // RelationType method requests
            RelationType.Create.Req relationType_create_req = 700;
            RelationType.GetRelatesForRoleLabel.Req relationType_getRelatesForRoleLabel_req = 701;
            RelationType.SetRelates.Req relationType_setRelates_req = 702;

            // AttributeType method requests
            AttributeType.Put.Req attributeType_put_req = 800;
            AttributeType.Get.Req attributeType_get_req = 801;
            AttributeType.GetValueType.Req attributeType_getValueType_req = 802;
            AttributeType.GetRegex.Req attributeType_getRegex_req = 803;
            AttributeType.SetRegex.Req attributeType_setRegex_req = 804;
        }
    }
    message Res {
        oneof res {
            // Type method responses
            Type.Delete.Res type_delete_res = 200;
            Type.SetLabel.Res type_setLabel_res = 201;
            Type.GetSupertype.Res type_getSupertype_res = 202;
            Type.SetSupertype.Res type_setSupertype_res = 203;
            Type.IsRoot.Res type_isRoot_res = 204;

            // Rule method responses
            Rule.When.Res rule_when_res = 300;
            Rule.Then.Res rule_then_res = 301;

            // RoleType method responses
            RoleType.GetRelation.Res roleType_getRelation_res = 400;

            // ThingType method responses
            ThingType.IsAbstract.Res thingType_isAbstract_res = 500;
            ThingType.SetAbstract.Res thingType_setAbstract_res = 501;
            ThingType.UnsetAbstract.Res thingType_unsetAbstract_res = 502;
            ThingType.SetOwns.Res thingType_setOwns_res = 506;
            ThingType.SetPlays.Res thingType_setPlays_res = 508;
            ThingType.UnsetOwns.Res thingType_unsetOwns_res = 509;
            ThingType.UnsetPlays.Res thingType_unsetPlays_res = 511;

            // EntityType method responses
            EntityType.Create.Res entityType_create_res = 600;

            // RelationType method responses
            RelationType.Create.Res relationType_create_res = 700;
            RelationType.GetRelatesForRoleLabel.Res relationType_getRelatesForRoleLabel_res = 701;
            RelationType.SetRelates.Res relationType_setRelates_res = 702;

            // AttributeType method responses
            AttributeType.Put.Res attributeType_put_res = 800;
            AttributeType.Get.Res attributeType_get_res = 801;
            AttributeType.GetValueType.Res attributeType_getValueType_res = 802;
            AttributeType.GetRegex.Res attributeType_getRegex_res = 803;
            AttributeType.SetRegex.Res attributeType_setRegex_res = 804;
        }
    }

    message Iter {
        message Req {
            oneof req {
                // Type iterator requests
                Type.GetSupertypes.Iter.Req type_getSupertypes_iter_req = 205;
                Type.GetSubtypes.Iter.Req type_getSubtypes_iter_req = 206;

                // Role iterator requests
                RoleType.GetRelations.Iter.Req roleType_getRelations_iter_req = 401;
                RoleType.GetPlayers.Iter.Req roleType_getPlayers_iter_req = 402;

                // ThingType iterator requests
                ThingType.GetInstances.Iter.Req thingType_getInstances_iter_req = 502;
                ThingType.GetOwns.Iter.Req thingType_getOwns_iter_req = 504;
                ThingType.GetPlays.Iter.Req thingType_getPlays_iter_req = 505;

                // RelationType iterator requests
                RelationType.GetRelates.Iter.Req relationType_getRelates_iter_req = 701;
            }
        }

        message Res {
            oneof res {
                // Type iterator responses
                Type.GetSupertypes.Iter.Res type_getSupertypes_iter_res = 205;
                Type.GetSubtypes.Iter.Res type_getSubtypes_iter_res = 206;

                // RoleType iterator responses
                RoleType.GetRelations.Iter.Res roleType_getRelations_iter_res = 401;
                RoleType.GetPlayers.Iter.Res roleType_getPlayers_iter_res = 402;

                // Type iterator responses
                ThingType.GetInstances.Iter.Res thingType_getInstances_iter_res = 502;
                ThingType.GetOwns.Iter.Res thingType_getOwns_iter_res = 504;
                ThingType.GetPlays.Iter.Res thingType_getPlays_iter_res = 505;

                // RelationType iterator responses
                RelationType.GetRelates.Iter.Res relationType_getRelates_iter_res = 701;
            }
        }
    }
}

// Type methods
message Type {
    string label = 1;
    SCHEMA baseType = 2;

    // Pre-filled responses:
    AttributeType.GetValueType.Res valueType_res = 3;

    enum SCHEMA {
        THING_TYPE = 0;
        ENTITY_TYPE = 1;
        RELATION_TYPE = 2;
        ATTRIBUTE_TYPE = 3;
        ROLE_TYPE = 4;
        RULE = 5;
    }

    message Delete {
        message Req {}
        message Res {}
    }

    message SetLabel {
        message Req {
            string label = 1;
        }
        message Res {}
    }

    message GetSupertype {
        message Req {}
        message Res {
            oneof res {
                Type type = 1;
                Null null = 2; // TODO: remove Null and replace all of its usage with NOT_SET
            }
        }
    }

    message SetSupertype {
        message Req {
            Type type = 1;
        }
        message Res {}
    }

    message GetSupertypes {
        message Iter {
            message Req {}
            message Res {
                Type type = 1;
            }
        }
    }

    message GetSubtypes {
        message Iter {
            message Req {}
            message Res {
                Type type = 1;
            }
        }
    }

    message IsRoot {
        message Req {}
        message Res {
            bool root = 1;
        }
    }
}


// Rule methods

message Rule {

    message When {
        message Req {}
        message Res {
            oneof res {
                string pattern = 1;
                Null null = 2; // TODO: remove Null and replace all of its usage with NOT_SET
            }
        }
    }

    message Then {
        message Req {}
        message Res {
            oneof res {
                string pattern = 1;
                Null null = 2; // TODO: remove Null and replace all of its usage with NOT_SET
            }
        }
    }
}


// RoleType methods

message RoleType {

    message GetRelation {
        message Req {}
        message Res {
            Type relationType = 1;
        }
    }

    message GetRelations {
        message Iter {
            message Req {}
            message Res {
                Type relationType = 1;
            }
        }
    }

    message GetPlayers {
        message Iter {
            message Req {}
            message Res {
                Type thingType = 1;
            }
        }
    }
}


// ThingType methods

message ThingType {

    message IsAbstract {
        message Req {}
        message Res {
            bool abstract = 1;
        }
    }

    message SetAbstract {
        message Req {}
        message Res {}
    }

    message UnsetAbstract {
        message Req {}
        message Res {}
    }

    message GetInstances {
        message Iter {
            message Req {}
            message Res {
                Thing thing = 1;
            }
        }
    }

    message GetOwns {
        message Iter {
            message Req {
                oneof filter {
                    AttributeType.VALUE_TYPE valueType = 1;
                    Null NULL = 2; // TODO: remove Null and replace all of its usage with NOT_SET
                }
                bool keysOnly = 3;
            }
            message Res {
                Type attributeType = 1;
            }
        }
    }

    message GetPlays {
        message Iter {
            message Req {}
            message Res {
                Type role = 1;
            }
        }
    }

    message SetOwns {
        message Req {
            Type attributeType = 1;
            oneof overridden {
                Type overriddenType = 2;
                Null NULL = 3; // TODO: remove Null and replace all of its usage with NOT_SET
            }
            bool isKey = 4;
        }
        message Res {}
    }

    message SetPlays {
        message Req {
            Type role = 1;
        }
        message Res {}
    }

    message UnsetOwns {
        message Req {
            Type attributeType = 1;
        }
        message Res {}
    }

    message UnsetPlays {
        message Req {
            Type role = 1;
        }
        message Res {}
    }
}


// EntityType methods

message EntityType {

    message Create {
        message Req {}
        message Res {
            Thing entity = 1;
        }
    }
}


// RelationType methods

message RelationType {

    message Create {
        message Req {}
        message Res {
            Thing relation = 1;
        }
    }

    message GetRelates {
        message Iter {
            message Req {}
            message Res {
                Type role = 1;
            }
        }
    }

    message GetRelatesForRoleLabel {
        message Req {
            string label = 1;
        }
        message Res {
            Type role = 1;
        }
    }

    message SetRelates {
        message Req {
            string label = 1;
        }
        message Res {
            Type role = 1;
        }
    }
}


// AttributeType methods

message AttributeType {

    enum VALUE_TYPE {
        BOOLEAN = 0;
        LONG = 1;
        DOUBLE = 2;
        STRING = 3;
        DATETIME = 4;
    }

    message Put {
        message Req {
            ValueObject value = 1;
        }
        message Res {
            Thing attribute = 1;
        }
    }

    message Get {
        message Req {
            ValueObject value = 1;
        }
        message Res {
            oneof res {
                Thing attribute = 1;
                Null null = 2; // TODO: remove Null and replace all of its usage with NOT_SET
            }
        }
    }

    message GetValueType {
        message Req {}
        message Res {
            oneof res {
                VALUE_TYPE valueType = 1;
                Null null = 2; // TODO: remove Null and replace all of its usage with NOT_SET
            }
        }
    }

    message GetRegex {
        message Req {}
        message Res {
            string regex = 1;
        }
    }

    message SetRegex {
        message Req {
            string regex = 1;
        }
        message Res {}
    }
}
