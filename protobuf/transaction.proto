//
// Copyright (C) 2020 Grakn Labs
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option java_package = "grakn.protocol";
option java_outer_classname = "TransactionProto";

import "protobuf/answer.proto";
import "protobuf/concept.proto";
import "protobuf/options.proto";

package grakn.protocol;

message Transaction {
    message Req {
        map<string, string> metadata = 1000;
        oneof req {
            Open.Req open_req = 1;
            Commit.Req commit_req = 2;
            Iter.Req iter_req = 4;
            GetType.Req getType_req = 5;
            GetThing.Req getThing_req = 6;
            PutEntityType.Req putEntityType_req = 8;
            PutAttributeType.Req putAttributeType_req = 9;
            PutRelationType.Req putRelationType_req = 10;
            PutRule.Req putRule_req = 12;
            ConceptMethod.Thing.Req conceptMethod_thing_req = 13;
            ConceptMethod.Type.Req conceptMethod_type_req = 14;
            Explanation.Req explanation_req = 15;
        }
    }
    message Res {
        oneof res {
            Open.Res open_res = 1;
            Commit.Res commit_res = 2;
            Iter.Res iter_res = 4;
            GetType.Res getType_res = 5;
            GetThing.Res getThing_res = 6;
            PutEntityType.Res putEntityType_res = 8;
            PutAttributeType.Res putAttributeType_res = 9;
            PutRelationType.Res putRelationType_res = 10;
            PutRule.Res putRule_res = 12;
            ConceptMethod.Thing.Res conceptMethod_thing_res = 13;
            ConceptMethod.Type.Res conceptMethod_type_res = 14;
            Explanation.Res explanation_res = 15;
        }
    }

    message Iter {
        message Req {
            Options options = 1;
            oneof req {
                int32 iteratorID = 2;
                Query.Iter.Req query_iter_req = 3;
                ConceptMethod.Thing.Iter.Req conceptMethod_thing_iter_req = 4;
                ConceptMethod.Type.Iter.Req conceptMethod_type_iter_req = 5;
            }
            message Options {
                oneof batch_size {
                    int32 number = 1;
                    bool all = 2;
                }
            }
        }
        message Res {
            oneof res {
                bool done = 1;
                int32 iteratorID = 2;
                Query.Iter.Res query_iter_res = 3;
                ConceptMethod.Thing.Iter.Res conceptMethod_thing_iter_res = 4;
                ConceptMethod.Type.Iter.Res conceptMethod_type_iter_res = 5;
            }
        }
    }

    enum Type {
        READ = 0;
        WRITE = 1;
    }

    message Open {
        message Req {
            bytes sessionID = 1;
            Type type = 2;
            Options options = 3;
        }
        message Res {}
    }

    message Commit {
        message Req {}
        message Res {}
    }

    message Query {
        message Iter {
            message Req {
                string query = 1;
                Options options = 2;
            }
            message Res {
                Answer answer = 1;
            }
        }
    }

    message GetType {
        message Req {
            string label = 1;
        }
        message Res {
            oneof res {
                grakn.protocol.Type type = 1;
            }
        }
    }

    message GetThing {
        message Req {
            bytes iid = 1;
        }
        message Res {
            oneof res {
                Thing thing = 1;
            }
        }
    }

    message PutEntityType {
        message Req {
            string label = 1;
        }
        message Res {
            grakn.protocol.Type entityType = 1;
        }
    }

    message PutAttributeType {
        message Req {
            string label = 1;
            AttributeType.VALUE_TYPE valueType = 2;
        }
        message Res {
            grakn.protocol.Type attributeType = 1;
        }
    }

    message PutRelationType {
        message Req {
            string label = 1;
        }
        message Res {
            grakn.protocol.Type relationType = 1;
        }
    }

    message PutRule {
        message Req {
            string label = 1;
            string when = 2;
            string then = 3;
        }
        message Res {
            grakn.protocol.Type rule = 1;
        }
    }

    message ConceptMethod {

        message Thing {

            message Req {
                bytes iid = 1;
                ThingMethod.Req method = 2;
            }
            message Res {
                ThingMethod.Res response = 1;
            }

            message Iter {
                message Req {
                    bytes iid = 1;
                    ThingMethod.Iter.Req method = 2;
                }
                message Res {
                    ThingMethod.Iter.Res response = 1;
                }
            }
        }

        message Type {

            message Req {
                string label = 1;
                TypeMethod.Req method = 2;
            }
            message Res {
                TypeMethod.Res response = 1;
            }

            message Iter {
                message Req {
                    string label = 1;
                    TypeMethod.Iter.Req method = 2;
                }
                message Res {
                    TypeMethod.Iter.Res response = 1;
                }
            }
        }
    }
}
