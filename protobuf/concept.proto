//
// Copyright (C) 2021 Grakn Labs
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option java_package = "grakn.protocol";
option java_outer_classname = "ConceptProto";

package grakn.protocol;

message ConceptManager {

    message Req {
        oneof req {
            GetThingType.Req get_thing_type_req = 1;
            GetThing.Req get_thing_req = 2;
            PutEntityType.Req put_entity_type_req = 3;
            PutAttributeType.Req put_attribute_type_req = 4;
            PutRelationType.Req put_relation_type_req = 5;
        }
    }

    message Res {
        oneof res {
            GetThingType.Res get_thing_type_res = 1;
            GetThing.Res get_thing_res = 2;
            PutEntityType.Res put_entity_type_res = 3;
            PutAttributeType.Res put_attribute_type_res = 4;
            PutRelationType.Res put_relation_type_res = 5;
        }
    }

    message GetThingType {
        message Req {
            string label = 1;
        }
        message Res {
            oneof res {
                Type thing_type = 1;
            }
        }
    }

    message GetThing {
        message Req {
            bytes iid = 1;
        }
        message Res {
            oneof res {
                Thing thing = 1;
            }
        }
    }

    message PutEntityType {
        message Req {
            string label = 1;
        }
        message Res {
            Type entity_type = 1;
        }
    }

    message PutAttributeType {
        message Req {
            string label = 1;
            AttributeType.ValueType value_type = 2;
        }
        message Res {
            Type attribute_type = 1;
        }
    }

    message PutRelationType {
        message Req {
            string label = 1;
        }
        message Res {
            Type relation_type = 1;
        }
    }
}

message Concept {
    oneof concept {
        Thing thing = 1;
        Type type = 2;
    }
}

message Thing {

    bytes iid = 1;
    Type type = 2;
    Attribute.Value value = 3;

    message Req {
        bytes iid = 1;
        oneof req {
            // Thing method requests
            Thing.Delete.Req thing_delete_req = 100;
            Thing.GetType.Req thing_get_type_req = 101;
            Thing.IsInferred.Req thing_is_inferred_req = 102;
            Thing.SetHas.Req thing_set_has_req = 103;
            Thing.UnsetHas.Req thing_unset_has_req = 104;
            Thing.GetHas.Req thing_get_has_req = 105;
            Thing.GetRelations.Req thing_get_relations_req = 106;
            Thing.GetPlays.Req thing_get_plays_req = 107;

            // Relation method requests
            Relation.AddPlayer.Req relation_add_player_req = 200;
            Relation.RemovePlayer.Req relation_remove_player_req = 201;
            Relation.GetPlayers.Req relation_get_players_req = 202;
            Relation.GetPlayersByRoleType.Req relation_get_players_by_role_type_req = 203;

            // Attribute method requests
            Attribute.GetOwners.Req attribute_get_owners_req = 300;
        }
    }
    
    message Res {
        oneof res {
            // Thing method responses
            Thing.Delete.Res thing_delete_res = 100;
            Thing.GetType.Res thing_get_type_res = 101;
            Thing.IsInferred.Res thing_is_inferred_res = 102;
            Thing.SetHas.Res thing_set_has_res = 103;
            Thing.UnsetHas.Res thing_unset_has_res = 104;
            Thing.GetHas.Res thing_get_has_res = 105;
            Thing.GetRelations.Res thing_get_relations_res = 106;
            Thing.GetPlays.Res thing_get_plays_res = 107;

            // Relation method responses
            Relation.AddPlayer.Res relation_add_player_res = 200;
            Relation.RemovePlayer.Res relation_remove_player_res = 201;
            Relation.GetPlayers.Res relation_get_players_res = 202;
            Relation.GetPlayersByRoleType.Res relation_get_players_by_role_type_res = 203;

            // Attribute method responses
            Attribute.GetOwners.Res attribute_get_owners_res = 300;
        }
    }

    message Delete {
        message Req {}
        message Res {}
    }

    message IsInferred {
        message Req {}
        message Res {
            bool inferred = 1;
        }
    }

    message GetType {
        message Req {}
        message Res {
            Type thing_type = 1;
        }
    }

    message SetHas {
        message Req {
            Thing attribute = 1;
        }
        message Res {}
    }

    message UnsetHas {
        message Req {
            Thing attribute = 1;
        }
        message Res {}
    }

    message GetHas {
        message Req {
            // Only one filter can be set at a time (attribute_types or keys_only). repeated can't be used in a oneof
            repeated Type attribute_types = 1;
            bool keys_only = 2;
        }
        message Res {
            repeated Thing attributes = 1;
        }
    }

    message GetPlays {
        message Req {}
        message Res {
            repeated Type role_types = 1;
        }
    }

    message GetRelations {
        message Req {
            repeated Type role_types = 1;
        }
        message Res {
            repeated Thing relations = 1;
        }
    }
}

message Relation {

    message GetPlayers {
        message Req {
            repeated Type role_types = 1;
        }
        message Res {
            repeated Thing things = 1;
        }
    }

    message GetPlayersByRoleType {
        message RoleTypeWithPlayer {
            Type role_type = 1;
            Thing player = 2;
        }
        message Req {}
        message Res {
            repeated RoleTypeWithPlayer role_types_with_players = 1;
        }
    }

    message AddPlayer {
        message Req {
            Type role_type = 1;
            Thing player = 2;
        }
        message Res {}
    }

    message RemovePlayer {
        message Req {
            Type role_type = 1;
            Thing player = 2;
        }
        message Res {}
    }
}

message Attribute {

    message GetOwners {
        message Req {
            oneof filter {
                Type thing_type = 1;
            }
        }
        message Res {
            repeated Thing things = 1;
        }
    }

    message Value {
        oneof value {
            string string = 1;
            bool boolean = 2;
            int64 long = 3;
            double double = 4;
            // time since epoch in milliseconds
            int64 date_time = 5;
        }
    }
}

message Type {
    string label = 1;
    string scope = 2;
    Encoding encoding = 3;
    AttributeType.ValueType value_type = 4;
    bool root = 5;

    message Req {
        string label = 1;
        string scope = 2;
        oneof req {
            // Type method requests
            Type.Delete.Req type_delete_req = 100;
            Type.SetLabel.Req type_set_label_req = 101;
            Type.IsAbstract.Req type_is_abstract_req = 102;
            Type.GetSupertype.Req type_get_supertype_req = 103;
            Type.SetSupertype.Req type_set_supertype_req = 104;
            Type.GetSupertypes.Req type_get_supertypes_req = 105;
            Type.GetSubtypes.Req type_get_subtypes_req = 106;

            // RoleType method requests
            RoleType.GetRelationType.Req role_type_get_relation_type_req = 200;
            RoleType.GetRelationTypes.Req role_type_get_relation_types_req = 201;
            RoleType.GetPlayers.Req role_type_get_players_req = 202;

            // ThingType method requests
            ThingType.SetAbstract.Req thing_type_set_abstract_req = 300;
            ThingType.UnsetAbstract.Req thing_type_unset_abstract_req = 301;
            ThingType.SetOwns.Req thing_type_set_owns_req = 302;
            ThingType.UnsetOwns.Req thing_type_unset_owns_req = 303;
            ThingType.SetPlays.Req thing_type_set_plays_req = 304;
            ThingType.UnsetPlays.Req thing_type_unset_plays_req = 305;
            ThingType.GetInstances.Req thing_type_get_instances_req = 306;
            ThingType.GetOwns.Req thing_type_get_owns_req = 307;
            ThingType.GetPlays.Req thing_type_get_plays_req = 308;

            // EntityType method requests
            EntityType.Create.Req entity_type_create_req = 400;

            // RelationType method requests
            RelationType.Create.Req relation_type_create_req = 500;
            RelationType.GetRelatesForRoleLabel.Req relation_type_get_relates_for_role_label_req = 501;
            RelationType.SetRelates.Req relation_type_set_relates_req = 502;
            RelationType.UnsetRelates.Req relation_type_unset_relates_req = 503;
            RelationType.GetRelates.Req relation_type_get_relates_req = 504;

            // AttributeType method requests
            AttributeType.Put.Req attribute_type_put_req = 600;
            AttributeType.Get.Req attribute_type_get_req = 601;
            AttributeType.GetRegex.Req attribute_type_get_regex_req = 602;
            AttributeType.SetRegex.Req attribute_type_set_regex_req = 603;
            AttributeType.GetOwners.Req attribute_type_get_owners_req = 604;
        }
    }
    message Res {
        oneof res {
            // Type method responses
            Type.Delete.Res type_delete_res = 100;
            Type.SetLabel.Res type_set_label_res = 101;
            Type.IsAbstract.Res type_is_abstract_res = 102;
            Type.GetSupertype.Res type_get_supertype_res = 103;
            Type.SetSupertype.Res type_set_supertype_res = 104;
            Type.GetSupertypes.Res type_get_supertypes_res = 105;
            Type.GetSubtypes.Res type_get_subtypes_res = 106;

            // RoleType method responses
            RoleType.GetRelationType.Res role_type_get_relation_type_res = 200;
            RoleType.GetRelationTypes.Res role_type_get_relation_types_res = 201;
            RoleType.GetPlayers.Res role_type_get_players_res = 202;

            // ThingType method responses
            ThingType.SetAbstract.Res thing_type_set_abstract_res = 300;
            ThingType.UnsetAbstract.Res thing_type_unset_abstract_res = 301;
            ThingType.SetOwns.Res thing_type_set_owns_res = 302;
            ThingType.UnsetOwns.Res thing_type_unset_owns_res = 303;
            ThingType.SetPlays.Res thing_type_set_plays_res = 304;
            ThingType.UnsetPlays.Res thing_type_unset_plays_res = 305;
            ThingType.GetInstances.Res thing_type_get_instances_res = 306;
            ThingType.GetOwns.Res thing_type_get_owns_res = 307;
            ThingType.GetPlays.Res thing_type_get_plays_res = 308;

            // EntityType method responses
            EntityType.Create.Res entity_type_create_res = 400;

            // RelationType method responses
            RelationType.Create.Res relation_type_create_res = 500;
            RelationType.GetRelatesForRoleLabel.Res relation_type_get_relates_for_role_label_res = 501;
            RelationType.SetRelates.Res relation_type_set_relates_res = 502;
            RelationType.UnsetRelates.Res relation_type_unset_relates_res = 503;
            RelationType.GetRelates.Res relation_type_get_relates_res = 504;

            // AttributeType method responses
            AttributeType.Put.Res attribute_type_put_res = 600;
            AttributeType.Get.Res attribute_type_get_res = 601;
            AttributeType.GetRegex.Res attribute_type_get_regex_res = 602;
            AttributeType.SetRegex.Res attribute_type_set_regex_res = 603;
            AttributeType.GetOwners.Res attribute_type_get_owners_res = 604;
        }
    }

    enum Encoding {
        THING_TYPE = 0;
        ENTITY_TYPE = 1;
        RELATION_TYPE = 2;
        ATTRIBUTE_TYPE = 3;
        ROLE_TYPE = 4;
    }

    message Delete {
        message Req {}
        message Res {}
    }

    message SetLabel {
        message Req {
            string label = 1;
        }
        message Res {}
    }

    message IsAbstract {
        message Req {}
        message Res {
            bool abstract = 1;
        }
    }

    message GetSupertype {
        message Req {}
        message Res {
            oneof res {
                Type type = 1;
            }
        }
    }

    message SetSupertype {
        message Req {
            Type type = 1;
        }
        message Res {}
    }

    message GetSupertypes {
        message Req {}
        message Res {
             repeated Type types = 1;
        }
    }

    message GetSubtypes {
        message Req {}
        message Res {
            repeated Type types = 1;
        }
    }
}

// RoleType methods

message RoleType {

    message GetRelationType {
        message Req {}
        message Res {
            Type relation_type = 1;
        }
    }

    message GetRelationTypes {
        message Req {}
        message Res {
            repeated Type relation_types = 1;
        }
    }

    message GetPlayers {
        message Req {}
        message Res {
            repeated Type thing_types = 1;
        }
    }
}

// ThingType methods

message ThingType {

    message SetAbstract {
        message Req {}
        message Res {}
    }

    message UnsetAbstract {
        message Req {}
        message Res {}
    }

    message GetInstances {
        message Req {}
        message Res {
            repeated Thing things = 1;
        }
    }

    message GetOwns {
        message Req {
            oneof filter {
                AttributeType.ValueType value_type = 1;
            }
            bool keys_only = 3;
        }
        message Res {
            repeated Type attribute_types = 1;
        }
    }

    message GetPlays {
        message Req {}
        message Res {
            repeated Type roles = 1;
        }
    }

    message SetOwns {
        message Req {
            Type attribute_type = 1;
            oneof overridden {
                Type overridden_type = 2;
            }
            bool is_key = 3;
        }
        message Res {}
    }

    message SetPlays {
        message Req {
            Type role = 1;
            oneof overridden {
                Type overridden_role = 2;
            }
        }
        message Res {}
    }

    message UnsetOwns {
        message Req {
            Type attribute_type = 1;
        }
        message Res {}
    }

    message UnsetPlays {
        message Req {
            Type role = 1;
        }
        message Res {}
    }
}

// EntityType methods

message EntityType {

    message Create {
        message Req {}
        message Res {
            Thing entity = 1;
        }
    }
}

// RelationType methods

message RelationType {

    message Create {
        message Req {}
        message Res {
            Thing relation = 1;
        }
    }

    message GetRelates {
        message Req {}
        message Res {
            repeated Type roles = 1;
        }
    }

    message GetRelatesForRoleLabel {
        message Req {
            string label = 1;
        }
        message Res {
            oneof role {
                Type role_type = 1;
            }
        }
    }

    message SetRelates {
        message Req {
            string label = 1;
            oneof overridden {
                string overridden_label = 2;
            }
        }
        message Res {}
    }

    message UnsetRelates {
        message Req {
            string label = 1;
        }
        message Res {}
    }
}

// AttributeType methods

message AttributeType {

    enum ValueType {
        OBJECT = 0;
        BOOLEAN = 1;
        LONG = 2;
        DOUBLE = 3;
        STRING = 4;
        DATETIME = 5;
    }

    message Put {
        message Req {
            Attribute.Value value = 1;
        }
        message Res {
            Thing attribute = 1;
        }
    }

    message Get {
        message Req {
            Attribute.Value value = 1;
        }
        message Res {
            oneof res {
                Thing attribute = 1;
            }
        }
    }

    message GetOwners {
        message Req {
            bool only_key = 1;
        }
        message Res {
            repeated Type owners = 1;
        }
    }

    message GetRegex {
        message Req {}
        message Res {
            string regex = 1;
        }
    }

    message SetRegex {
        message Req {
            string regex = 1;
        }
        message Res {}
    }

    message GetSubtypes {
        message Req {
            oneof req {
                ValueType value_type = 1;
            }
        }
        message Res {
            repeated Type types = 1;
        }
    }

    message GetInstances {
        message Req {
            oneof req {
                ValueType value_type = 1;
            }
        }
        message Res {
            repeated Thing things = 1;
        }
    }
}

