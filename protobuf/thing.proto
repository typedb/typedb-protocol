//
// Copyright (C) 2020 Grakn Labs
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option java_package = "grakn.protocol";
option java_outer_classname = "ThingProto";

import "protobuf/concept.proto";
import "protobuf/type.proto";

package grakn.protocol;

message ThingMethod {
    message Req {
        oneof req {
            // Thing method requests
            Thing.Delete.Req thing_delete_req = 900;
            Thing.GetType.Req thing_getType_req = 901;
            Thing.IsInferred.Req thing_isInferred_req = 902;
            Thing.SetHas.Req thing_setHas_req = 906;
            Thing.UnsetHas.Req thing_unsetHas_req = 907;

            // Relation method requests
            Relation.AddPlayer.Req relation_addPlayer_req = 1002;
            Relation.RemovePlayer.Req relation_removePlayer_req = 1003;

            // Attribute method requests
            Attribute.GetValue.Req attribute_getValue_req = 1100;
        }
    }
    message Res {
        oneof res {
            // Thing method responses
            Thing.Delete.Res thing_delete_res = 900;
            Thing.GetType.Res thing_getType_res = 901;
            Thing.IsInferred.Res thing_isInferred_res = 902;
            Thing.SetHas.Res thing_setHas_res = 906;
            Thing.UnsetHas.Res thing_unsetHas_res = 907;

            // Relation method responses
            Relation.AddPlayer.Res relation_addPlayer_res = 1002;
            Relation.RemovePlayer.Res relation_removePlayer_res = 1003;

            // Attribute method responses
            Attribute.GetValue.Res attribute_getValue_res = 1100;
        }
    }

    message Iter {
        message Req {
            oneof req {
                // Thing iterator requests
                Thing.GetHas.Iter.Req thing_getHas_iter_req = 903;
                Thing.GetRelations.Iter.Req thing_getRelations_iter_req = 904;
                Thing.GetPlays.Iter.Req thing_getPlays_iter_req = 905;

                // Relation iterator responses
                Relation.GetPlayers.Iter.Req relation_getPlayers_iter_req = 1000;
                Relation.GetPlayersByRoleType.Iter.Req relation_getPlayersByRoleType_iter_req = 1001;

                // Attribute iterator requests
                Attribute.GetOwners.Iter.Req attribute_getOwners_iter_req = 1101;
            }
        }

        message Res {
            oneof res {
                // Thing iterator responses
                Thing.GetHas.Iter.Res thing_getHas_iter_res = 903;
                Thing.GetRelations.Iter.Res thing_getRelations_iter_res = 904;
                Thing.GetPlays.Iter.Res thing_getPlays_iter_res = 905;

                // Relation iterator responses
                Relation.GetPlayers.Iter.Res relation_getPlayers_iter_res = 1000;
                Relation.GetPlayersByRoleType.Iter.Res relation_getPlayersByRoleType_iter_res = 1001;

                // Attribute iterator responses
                Attribute.GetOwners.Iter.Res attribute_getOwners_iter_res = 1101;
            }
        }
    }
}


// Thing methods

message Thing {
    bytes iid = 1;
    SCHEMA baseType = 2;

    // Pre-filled responses:
    Thing.GetType.Res type_res = 3;
    Thing.IsInferred.Res inferred_res = 4;
    Attribute.GetValue.Res value_res = 5;
    AttributeType.GetValueType.Res valueType_res = 6;

    enum SCHEMA {
        ENTITY = 0;
        RELATION = 1;
        ATTRIBUTE = 2;
    }

    message Delete {
        message Req {}
        message Res {}
    }

    message IsInferred {
        message Req {}
        message Res {
            bool inferred = 1;
        }
    }

    message GetType {
        message Req {}
        message Res {
            Type thingType = 1;
        }
    }

    message SetHas {
        message Req {
            Thing attribute = 1;
        }
        message Res {}
    }

    message UnsetHas {
        message Req {
            Thing attribute = 1;
        }
        message Res {}
    }

    message GetHas {
        message Iter {
            message Req {
                repeated Type attributeTypes = 1;
                bool keysOnly = 2;
            }
            message Res {
                Thing attribute = 1;
            }
        }
    }

    message GetPlays {
        message Iter {
            message Req {}
            message Res {
                Type roleType = 1;
            }
        }
    }

    message GetRelations {
        message Iter {
            message Req {
                repeated Type roleTypes = 1;
            }
            message Res {
                Thing relation = 1;
            }
        }
    }
}


// Relation methods

message Relation {

    message GetPlayers {
        message Iter {
            message Req {
                repeated Type roleTypes = 1;
            }
            message Res {
                Thing thing = 1;
            }
        }
    }

    message GetPlayersByRoleType {
        message Iter {
            message Req {}
            message Res {
                Type roleType = 1;
                Thing player = 2;
            }
        }
    }

    message AddPlayer {
        message Req {
            Type roleType = 1;
            Thing player = 2;
        }
        message Res {}
    }

    message RemovePlayer {
        message Req {
            Type roleType = 1;
            Thing player = 2;
        }
        message Res {}
    }
}


// Attribute methods

message Attribute {

    message GetValue {
        message Req {}
        message Res {
            ValueObject value = 1;
        }
    }

    message GetOwners {
        message Iter {
            message Req {
                oneof filter {
                    Type thingType = 1;
                    Null null = 2;
                }
            }
            message Res {
                Thing thing = 1;
            }
        }
    }
}
